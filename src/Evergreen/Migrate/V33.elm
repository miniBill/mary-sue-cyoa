module Evergreen.Migrate.V33 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V31.Types
import Evergreen.V31.Types.Password
import Evergreen.V33.Types
import Evergreen.V33.Types.Password
import Lamdera.Migrations exposing (..)


frontendModel : Evergreen.V31.Types.FrontendModel -> ModelMigration Evergreen.V33.Types.FrontendModel Evergreen.V33.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V31.Types.BackendModel -> ModelMigration Evergreen.V33.Types.BackendModel Evergreen.V33.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V31.Types.FrontendMsg -> MsgMigration Evergreen.V33.Types.FrontendMsg Evergreen.V33.Types.FrontendMsg
frontendMsg _ =
    MsgUnchanged


toBackend : Evergreen.V31.Types.ToBackend -> MsgMigration Evergreen.V33.Types.ToBackend Evergreen.V33.Types.BackendMsg
toBackend _ =
    MsgUnchanged


backendMsg : Evergreen.V31.Types.BackendMsg -> MsgMigration Evergreen.V33.Types.BackendMsg Evergreen.V33.Types.BackendMsg
backendMsg _ =
    MsgUnchanged


toFrontend : Evergreen.V31.Types.ToFrontend -> MsgMigration Evergreen.V33.Types.ToFrontend Evergreen.V33.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V31.Types.BackendModel -> Evergreen.V33.Types.BackendModel
migrate_Types_BackendModel old =
    { cyoas = old.cyoas |> Dict.map (\_ -> migrate_Types_CYOA)
    , connections = old.connections
    , users = old.users |> Dict.map (\_ -> migrate_Types_User)
    }


migrate_Types_FrontendModel : Evergreen.V31.Types.FrontendModel -> Evergreen.V33.Types.FrontendModel
migrate_Types_FrontendModel old =
    { key = old.key
    , inner = old.inner |> migrate_Types_InnerModel
    , deviceClass = old.deviceClass
    }


migrate_Types_AdminModel : Evergreen.V31.Types.AdminModel -> Evergreen.V33.Types.AdminModel
migrate_Types_AdminModel old =
    { password = old.password |> migrate_Types_Password_Password
    , cyoas = old.cyoas |> Dict.map (\_ -> migrate_Types_CYOA)
    , inner = old.inner |> migrate_Types_InnerAdminModel
    }


migrate_Types_CYOA : Evergreen.V31.Types.CYOA -> Evergreen.V33.Types.CYOA
migrate_Types_CYOA old =
    { sections = List.map migrate_Types_Section old
    , userId = "admin"
    }


migrate_Types_Section : Evergreen.V31.Types.Section -> Evergreen.V33.Types.Section
migrate_Types_Section old =
    { name = old.name
    , description = old.description
    , powers = old.powers |> List.map migrate_Types_Power
    }


migrate_Types_Power : Evergreen.V31.Types.Power -> Evergreen.V33.Types.Power
migrate_Types_Power old =
    { label = old.label
    , id = old.id
    , cost = old.cost
    , replaces = old.replaces
    , requires = old.requires |> List.map migrate_Types_Requirement
    , description = old.description
    }


migrate_Types_Requirement : Evergreen.V31.Types.Requirement -> Evergreen.V33.Types.Requirement
migrate_Types_Requirement old =
    case old of
        Evergreen.V31.Types.Requirement p0 ->
            Evergreen.V33.Types.Requirement p0

        Evergreen.V31.Types.AtLeastXOf p0 p1 ->
            Evergreen.V33.Types.AtLeastXOf p0 (p1 |> List.map migrate_Types_Requirement)


migrate_Types_Choices : Evergreen.V31.Types.Choices -> Evergreen.V33.Types.Choices
migrate_Types_Choices old =
    case old of
        Evergreen.V31.Types.Tiered p0 ->
            Evergreen.V33.Types.Tiered (p0 |> Dict.map (\_ -> migrate_Types_Tier))

        Evergreen.V31.Types.Simple p0 ->
            Evergreen.V33.Types.Simple p0


migrate_Types_InnerAdminModel : Evergreen.V31.Types.InnerAdminModel -> Evergreen.V33.Types.InnerAdminModel
migrate_Types_InnerAdminModel old =
    case old of
        Evergreen.V31.Types.Listing ->
            Evergreen.V33.Types.Listing

        Evergreen.V31.Types.ListingUsers p0 ->
            Evergreen.V33.Types.ListingUsers (p0 |> Dict.map (\_ -> migrate_Types_User))

        Evergreen.V31.Types.PasswordResetDone p0 p1 ->
            Evergreen.V33.Types.PasswordResetDone p0 p1

        Evergreen.V31.Types.Creating p0 ->
            Evergreen.V33.Types.Creating p0

        Evergreen.V31.Types.Editing p0 p1 p2 p3 ->
            Evergreen.V33.Types.Editing p0 p1 p2 p3

        Evergreen.V31.Types.Deleting p0 ->
            Evergreen.V33.Types.Deleting p0

        Evergreen.V31.Types.Renaming p0 p1 ->
            Evergreen.V33.Types.Renaming p0 p1


migrate_Types_InnerModel : Evergreen.V31.Types.InnerModel -> Evergreen.V33.Types.InnerModel
migrate_Types_InnerModel old =
    case old of
        Evergreen.V31.Types.Homepage ->
            Evergreen.V33.Types.Homepage

        Evergreen.V31.Types.Loading p0 p1 ->
            Evergreen.V33.Types.Loading p0 (p1 |> migrate_Types_Choices)

        Evergreen.V31.Types.NotFound p0 ->
            Evergreen.V33.Types.NotFound p0

        Evergreen.V31.Types.Login p0 ->
            Evergreen.V33.Types.Login
                { password = p0.password |> migrate_Types_Password_Password
                , loggingIn = p0.loggingIn
                }

        Evergreen.V31.Types.Admin p0 ->
            Evergreen.V33.Types.Admin (p0 |> migrate_Types_AdminModel)

        Evergreen.V31.Types.Loaded p0 ->
            Evergreen.V33.Types.Loaded
                { cyoaId = p0.cyoaId
                , choices = p0.choices |> migrate_Types_Choices
                , compact = p0.compact
                , data = p0.data |> migrate_Types_CYOA
                }


migrate_Types_Password_Password : Evergreen.V31.Types.Password.Password -> Evergreen.V33.Types.Password.Password
migrate_Types_Password_Password old =
    case old of
        Evergreen.V31.Types.Password.Password p0 ->
            Evergreen.V33.Types.Password.password p0


migrate_Types_Tier : Evergreen.V31.Types.Tier -> Evergreen.V33.Types.Tier
migrate_Types_Tier old =
    case old of
        Evergreen.V31.Types.S ->
            Evergreen.V33.Types.S

        Evergreen.V31.Types.A ->
            Evergreen.V33.Types.A

        Evergreen.V31.Types.B ->
            Evergreen.V33.Types.B

        Evergreen.V31.Types.C ->
            Evergreen.V33.Types.C

        Evergreen.V31.Types.D ->
            Evergreen.V33.Types.D

        Evergreen.V31.Types.F ->
            Evergreen.V33.Types.F


migrate_Types_ToFrontend : Evergreen.V31.Types.ToFrontend -> Evergreen.V33.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V31.Types.TFGotCYOA p0 p1 ->
            Evergreen.V33.Types.TFGotCYOA p0 (p1 |> migrate_Types_CYOA)

        Evergreen.V31.Types.TFRenamedCYOA p0 p1 ->
            Evergreen.V33.Types.TFRenamedCYOA p0 p1

        Evergreen.V31.Types.TFDeletedCYOA p0 ->
            Evergreen.V33.Types.TFDeletedCYOA p0

        Evergreen.V31.Types.TFCYOAMissing p0 ->
            Evergreen.V33.Types.TFCYOAMissing p0

        Evergreen.V31.Types.TFAdmin p0 ->
            Evergreen.V33.Types.TFAdmin (p0 |> Dict.map (\_ -> migrate_Types_CYOA))

        Evergreen.V31.Types.TFUsers p0 ->
            Evergreen.V33.Types.TFUsers (p0 |> Dict.map (\_ -> migrate_Types_User))

        Evergreen.V31.Types.TFResetPassword p0 p1 ->
            Evergreen.V33.Types.TFResetPassword p0 p1


migrate_Types_User : Evergreen.V31.Types.User -> Evergreen.V33.Types.User
migrate_Types_User old =
    { password = old.password |> migrate_Types_Password_Password
    }
